import { GraphQLError } from 'graphql';
import { FeatureDefinition, FeatureDefinitions, FeatureVersion } from "./coreSpec";
import { Schema, DirectiveDefinition } from '../definitions';
export declare const sourceIdentity = "https://specs.apollo.dev/source";
export declare class SourceSpecDefinition extends FeatureDefinition {
    readonly minimumFederationVersion: FeatureVersion;
    constructor(version: FeatureVersion, minimumFederationVersion: FeatureVersion);
    addElementsToSchema(schema: Schema): GraphQLError[];
    allElementNames(): string[];
    sourceAPIDirective(schema: Schema): DirectiveDefinition<SourceAPIDirectiveArgs>;
    sourceTypeDirective(schema: Schema): DirectiveDefinition<SourceTypeDirectiveArgs>;
    sourceFieldDirective(schema: Schema): DirectiveDefinition<SourceFieldDirectiveArgs>;
    private getSourceDirectives;
    validateSubgraphSchema(schema: Schema): GraphQLError[];
    private validateSourceAPI;
    private validateSourceType;
    private validateSourceField;
}
export type SourceAPIDirectiveArgs = {
    name: string;
    http?: HTTPSourceAPI;
};
export type HTTPSourceAPI = {
    baseURL: string;
    headers?: HTTPHeaderMapping[];
};
export type HTTPHeaderMapping = {
    name: string;
    as?: string;
    value?: string;
};
export type SourceTypeDirectiveArgs = {
    api: string;
    http?: HTTPSourceType;
    selection: JSONSelection;
    keyTypeMap?: KeyTypeMap;
};
export type HTTPSourceType = {
    GET?: URLPathTemplate;
    POST?: URLPathTemplate;
    headers?: HTTPHeaderMapping[];
    body?: JSONSelection;
};
type URLPathTemplate = string;
type JSONSelection = string;
type KeyTypeMap = {
    key: string;
    typeMap: {
        [__typename: string]: string;
    };
};
export type SourceFieldDirectiveArgs = {
    api: string;
    http?: HTTPSourceField;
    selection?: JSONSelection;
    keyTypeMap?: KeyTypeMap;
};
export type HTTPSourceField = {
    GET?: URLPathTemplate;
    POST?: URLPathTemplate;
    PUT?: URLPathTemplate;
    PATCH?: URLPathTemplate;
    DELETE?: URLPathTemplate;
    body?: JSONSelection;
    headers?: HTTPHeaderMapping[];
};
export declare const SOURCE_VERSIONS: FeatureDefinitions<SourceSpecDefinition>;
export {};
//# sourceMappingURL=sourceSpec.d.ts.map